/** * $Id: SpringJfinalConfiguration.java,v 1.0 2019-07-14 14:32 chenmin Exp $ */package com.github.jfinal.config;import com.github.jfinal.annotation.RouterPath;import com.google.common.collect.Maps;import com.jfinal.captcha.CaptchaCache;import com.jfinal.captcha.ICaptchaCache;import com.jfinal.config.JFinalConfig;import com.jfinal.core.ActionHandler;import com.jfinal.core.ControllerFactory;import com.jfinal.json.IJsonFactory;import com.jfinal.json.JacksonFactory;import com.jfinal.log.ILogFactory;import com.jfinal.log.JdkLogFactory;import com.jfinal.log.Log4jLogFactory;import com.jfinal.plugin.IPlugin;import com.jfinal.plugin.activerecord.ActiveRecordPlugin;import com.jfinal.plugin.activerecord.cache.EhCache;import com.jfinal.plugin.activerecord.cache.ICache;import com.jfinal.plugin.activerecord.dialect.MysqlDialect;import com.jfinal.proxy.ProxyFactory;import com.jfinal.render.IRenderFactory;import com.jfinal.render.RenderFactory;import com.jfinal.template.Directive;import com.jfinal.template.ext.spring.JFinalViewResolver;import com.jfinal.template.source.ClassPathSourceFactory;import com.jfinal.template.source.ISourceFactory;import com.jfinal.token.ITokenCache;import com.jfinal.token.Token;import lombok.Data;import lombok.experimental.Accessors;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.BeanFactoryAware;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.support.BeanDefinitionRegistry;import org.springframework.boot.autoconfigure.AutoConfigurationPackages;import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.cache.caffeine.CaffeineCache;import org.springframework.context.EnvironmentAware;import org.springframework.context.ResourceLoaderAware;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Import;import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;import org.springframework.core.env.Environment;import org.springframework.core.io.ResourceLoader;import org.springframework.core.type.AnnotationMetadata;import org.springframework.util.StringUtils;import org.springframework.web.servlet.view.AbstractTemplateViewResolver;import javax.sql.DataSource;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * @author 陈敏 * @version $Id: SpringJfinalConfiguration.java,v 1.1 2019-07-14 14:32 chenmin Exp $ * Created on 2019-07-14 14:32 * My blog： https://www.chenmin.info */@Slf4j@Configuration@EnableConfigurationProperties(JfinalProperties.class)@ConditionalOnClass(name = "com.jfinal.core.JFinal")public class SpringJfinalConfiguration {    @Autowired    private JfinalProperties jfinalProperties;    @Bean    @ConditionalOnMissingBean(AbstractTemplateViewResolver.class)    public AbstractTemplateViewResolver jFinalViewResolver(ISourceFactory sourceFactory) {        JFinalViewResolver jFinalViewResolver = new JFinalViewResolver();        // setDevMode 配置放在最前面        jFinalViewResolver.setDevMode(jfinalProperties.getDevMode());        // 使用 ClassPathSourceFactory 从 class path 与 jar 包中加载模板文件        jFinalViewResolver.setSourceFactory(sourceFactory);        // 在使用 ClassPathSourceFactory 时要使用 setBaseTemplatePath        // 代替 jFinalViewResolver.setPrefix("/view/")        JFinalViewResolver.engine.setBaseTemplatePath("/public/");        jFinalViewResolver.setSuffix(".html");        jFinalViewResolver.setContentType("text/html;charset=UTF-8");        return jFinalViewResolver;    }    @Bean    @ConditionalOnMissingBean(ISourceFactory.class)    public ISourceFactory sourceFactory() {        return new ClassPathSourceFactory();    }    @Bean    @ConditionalOnMissingBean(IJsonFactory.class)    public IJsonFactory jsonFactory(){        return new JacksonFactory();    }    @Bean    @ConditionalOnMissingBean(IRenderFactory.class)    public IRenderFactory renderFactory() {        return new RenderFactory();    }    @Bean    @ConditionalOnMissingBean(ICaptchaCache.class)    public ICaptchaCache captchaCache() {        return new CaptchaCache();    }    @Bean    @ConditionalOnMissingBean(ILogFactory.class)    @ConditionalOnClass(name = "org.apache.log4j.Level")    public ILogFactory log4jLogFactory() {        return new Log4jLogFactory();    }    @Bean    @ConditionalOnMissingBean(ILogFactory.class)    @ConditionalOnMissingClass(value = "org.apache.log4j.Level")    public ILogFactory jdkLogFactory() {        return new JdkLogFactory();    }    @Bean    @ConditionalOnMissingBean(ProxyFactory.class)    public ProxyFactory proxyFactory() {        return new ProxyFactory();    }    @Bean    @ConditionalOnMissingBean(ControllerFactory.class)    public ControllerFactory controllerFactory() {        return new ControllerFactory();    }    @Bean    @ConditionalOnMissingBean(ActionHandler.class)    public ActionHandler actionHandler() {        return new ActionHandler();    }    @Bean    @ConditionalOnMissingBean(ICache.class)    public ICache cache() {        return new EhCache();    }    @Bean    @ConditionalOnMissingBean(ITokenCache.class)    public ITokenCache tokenCache() {        return new ITokenCache() {            private List<Token> tokens = new ArrayList<Token>();            @Override            public void put(Token token) {                tokens.add(token);            }            @Override            public void remove(Token token) {                tokens.remove(token);            }            @Override            public boolean contains(Token token) {                return tokens.contains(token);            }            @Override            public List<Token> getAll() {                return tokens;            }        };    }    @Bean    public FilterRegistrationBean filterRegistrationBean(JFinalConfig jFinalConfig) {        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();        filterRegistrationBean.setFilter(new SpringJFinalFilter().setJFinalConfig(jFinalConfig));        HashMap<Object, Object> params = Maps.newHashMap();        params.put("configClass", "cn.hzsoftware.common.config.jfinal.JfinalConfig");        filterRegistrationBean.setInitParameters(params);        filterRegistrationBean.addUrlPatterns("/*");        return filterRegistrationBean;    }    @Bean    @ConditionalOnBean(DataSource.class)    public IPlugin activeRecordPlugin(ICache cache, DataSource dataSource) {        ActiveRecordPlugin activeRecordPlugin = new ActiveRecordPlugin(dataSource);        activeRecordPlugin.setCache(cache);        activeRecordPlugin.setDialect(new MysqlDialect());        activeRecordPlugin.setShowSql(true);        return activeRecordPlugin;    }    @Data    @Accessors(chain = true)    public static class AutoConfiguredJfinalControlScannerRegistrar            implements BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware {        private BeanFactory beanFactory;        private ResourceLoader resourceLoader;        private Environment environment;        @Override        public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {            log.debug("Searching for router annotated with @RouterPath");            ClassPathJfinalControlScanner scanner = new ClassPathJfinalControlScanner(registry);            try {                if (this.resourceLoader != null) {                    scanner.setResourceLoader(this.resourceLoader);                }                List<String> packages = AutoConfigurationPackages.get(this.beanFactory);                if (log.isDebugEnabled()) {                    for (String pkg : packages) {                        log.debug("Using auto-configuration base package '{}'", pkg);                    }                }                scanner.setAnnotationClass(RouterPath.class);                scanner.registerFilters();                scanner.doScan(StringUtils.toStringArray(packages));            } catch (IllegalStateException ex) {                log.debug("Could not determine auto-configuration package, automatic router scanning disabled.", ex);            }        }    }    @Configuration    @Import({AutoConfiguredJfinalControlScannerRegistrar.class})    public static class JfinalControlRegistrarNotFoundConfiguration {    }}